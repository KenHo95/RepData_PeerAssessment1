library('dpylr')
library('dplyr')
library('tidyverse')
ls()
ls(dir)
mydir()
df <- read_csv('activity.zip')
View(df)
str(df)
summary(df)
df %>% group_by(date) %>%
muatate(total_steps_per_day = sum(steps))
df %>% group_by(date) %>%
mutate(total_steps_per_day = sum(steps))
df %>% group_by(date) %>%
mutate(total_steps_per_day = sum(steps, na.rm = T))
df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(total_steps_per_day = sum(steps, na.rm = T))
df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(total_steps_per_day = sum(steps, na.rm = T)) %>%
select(date, total_steps_per_day) %>%
slice(1) %>%
ungroup()
hist(df)
str(df)
hist(df)
str(df)
View(df)
df <- df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(total_steps_per_day = sum(steps, na.rm = T)) %>%
select(date, total_steps_per_day) %>%
slice(1) %>%
ungroup()
hist(df)
str(df)
df <- df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(date = as.numeric(date), total_steps_per_day = sum(steps, na.rm = T)) %>%
select(date, total_steps_per_day) %>%
slice(1) %>%
ungroup()
df <- read_csv('activity.zip')
df_steps_day <- df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(date = as.numeric(date), total_steps_per_day = sum(steps, na.rm = T)) %>%
select(date, total_steps_per_day) %>%
slice(1) %>%
ungroup()
df_steps_day <- mutate(df_steps_day, date = as.numeric(date))
df_steps_day <- df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(total_steps_per_day = sum(steps, na.rm = T)) %>%
select(date, total_steps_per_day) %>%
slice(1) %>%
ungroup()
df_steps_day <- mutate(df_steps_day, date = as.numeric(date))
str(df)
hist(df)
str(df_steps_day)
hist(df_steps_day)
str(df_steps_day)
hist(df_steps_day)
View(df_steps_day)
df_steps_day <- df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(total_steps_per_day = sum(steps, na.rm = T)) %>%
select(date, total_steps_per_day) %>%
slice(1) %>%
ungroup()
df_steps_day
df_steps_day <- df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(total_steps_per_day = sum(steps, na.rm = T)) %>%
select(date, total_steps_per_day) %>%
slice(1) %>%
ungroup()
hist(df_steps_day$total_steps_per_day)
# Calculate and report the mean and median of the total number of steps taken per day
df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
summarise(mean = mean(steps, na.rm = T), median = median(steps, na.rm = T))
# Calculate and report the mean and median of the total number of steps taken per day
df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
summarise(mean = mean(steps, na.rm = T), median = median(steps, na.rm = T)) %>%
ungroup()
# Calculate and report the mean and median of the total number of steps taken per day
df_steps_day %>%
summarise(mean = mean(steps, na.rm = T), median = median(steps, na.rm = T))
# Calculate and report the mean and median of the total number of steps taken per day
df_steps_day %>%
summarise(mean = mean(total_steps_per_day, na.rm = T), median = median(total_steps_per_day, na.rm = T))
# Calculate the total number of steps taken per day
df_steps_day <- df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(total_steps_per_day = sum(steps, na.rm = T)) %>%
select(date, total_steps_per_day) %>%
slice(1) %>%
ungroup()
# Make a histogram of the total number of steps taken each day
hist(df_steps_day$total_steps_per_day)
```{r, echo = TRUE}
# Calculate and report the mean and median of the total number of steps taken per day
df_steps_day %>%
summarise(mean = mean(total_steps_per_day, na.rm = T), median = median(total_steps_per_day, na.rm = T))
# Calculate and report the mean and median of the total number of steps taken per day
print("Mean & Median of total number of steps taken per day")
# Calculate and report the mean and median of the total number of steps taken per day
print("Mean & Median of total number of steps taken per day  ")
# Calculate and report the mean and median of the total number of steps taken per day
print("Mean & Median of total number of steps taken per day" +
df_steps_day %>%
summarise(mean = mean(total_steps_per_day, na.rm = T), median = median(total_steps_per_day, na.rm = T)) )
)
]
# Calculate and report the mean and median of the total number of steps taken per day
print("Mean & Median of total number of steps taken per day")
df_steps_day %>%
summarise(mean = mean(total_steps_per_day, na.rm = T), median = median(total_steps_per_day, na.rm = T)) %>% print()
# Calculate and report the mean and median of the total number of steps taken per day
print("Mean & Median of total number of steps taken per day")
df_steps_day %>%
summarise(mean = mean(total_steps_per_day, na.rm = T), median = median(total_steps_per_day, na.rm = T))
# Calculate and report the mean and median of the total number of steps taken per day
print("Mean & Median of total number of steps taken per day")
df_steps_day %>%
summarise(mean = mean(total_steps_per_day, na.rm = T), median = median(total_steps_per_day, na.rm = T)) %>% print()
# Calculate and report the mean and median of the total number of steps taken per day
print("Mean & Median of total number of steps taken per day\n")
# Calculate and report the mean and median of the total number of steps taken per day
print("Mean & Median of total number of steps taken per day\n")
df_steps_day %>%
summarise(mean = mean(total_steps_per_day, na.rm = T), median = median(total_steps_per_day, na.rm = T)) %>% print()
# Calculate and report the mean and median of the total number of steps taken per day
print("Mean & Median of total number of steps taken per day  \n")
df_steps_day %>%
summarise(mean = mean(total_steps_per_day, na.rm = T), median = median(total_steps_per_day, na.rm = T)) %>% print()
# Calculate and report the mean and median of the total number of steps taken per day
df_steps_day %>%
summarise(mean = mean(total_steps_per_day, na.rm = T), median = median(total_steps_per_day, na.rm = T))
xlab="Number of steps per day",
# Make a histogram of the total number of steps taken each day
hist(df_steps_day$total_steps_per_day,
main="Total number of steps taken each day",
xlab="Number of steps per day")
# Make a histogram of the total number of steps taken each day
hist(df_steps_day$total_steps_per_day,
main="Histogram of total number of steps taken each day",
xlab="Number of steps per day")
# Make a histogram of the total number of steps taken each day
hist(df_steps_day$total_steps_per_day,
main="Histogram of total number of steps \ntaken each day",
xlab="Number of steps per day")
# Make a histogram of the total number of steps taken each day
hist(df_steps_day$total_steps_per_day,
main="Histogram of total number \nof steps taken each day",
xlab="Number of steps per day")
# Make a histogram of the total number of steps taken each day
hist(df_steps_day$total_steps_per_day,
main="Histogram of total number of steps taken each day",
xlab="Number of steps per day")
```{r, echo = TRUE, fig.height=4.5}
# Make a histogram of the total number of steps taken each day
hist(df_steps_day$total_steps_per_day,
main="Histogram of total number of steps taken each day",
xlab="Number of steps per day")
```{r, echo = TRUE, fig.height=1.5}
# Make a histogram of the total number of steps taken each day
hist(df_steps_day$total_steps_per_day,
main="Histogram of total number of steps taken each day",
xlab="Number of steps per day")
```{r, echo = TRUE, fig.height=2.5}
# Make a histogram of the total number of steps taken each day
hist(df_steps_day$total_steps_per_day,
main="Histogram of total number of steps taken each day",
xlab="Number of steps per day")
```{r, echo = TRUE, fig.height=0.5}
# Calculate and report the mean and median of the total number of steps taken per day
df_steps_day %>%
summarise(mean = mean(total_steps_per_day, na.rm = T), median = median(total_steps_per_day, na.rm = T))
# Make a histogram of the total number of steps taken each day
hist(df_steps_day$total_steps_per_day,
main="Histogram of total number of steps taken each day",
xlab="Number of steps per day")
```{r, echo = TRUE}
# Make a histogram of the total number of steps taken each day
hist(df_steps_day$total_steps_per_day,
main="Histogram of total number of steps taken each day",
xlab="Number of steps per day")
library(tidyverse)
library(ggplot2)
library(tidyverse)
library(ggplot2)
ggplot(df, aes(x=date, y=interval)) +
geom_line()
ggplot(df, aes(x=date, y=steps)) +
geom_line()
df %>% filter(!is.na(steps)) %>%
ggplot(aes(x=date, y=steps)) +
geom_line()
df %>% filter(!is.na(steps)) %>%
ggplot(aes(x=date::interval, y=steps)) +
geom_line()
df %>% filter(!is.na(steps)) %>%
ggplot(aes(x=date::interval, y=steps)) +
geom_line()
df %>% filter(!is.na(steps)) %>%
ggplot(aes(x=date::interval, y=steps)) +
geom_line()
df %>% filter(!is.na(steps)) %>%
ggplot(aes(x=date, y=steps)) +
geom_line()
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
View(hm)
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- ymd_s("2010-12-13 0")
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- ymd_m("2010-12-13 0")
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- ymd_h("2010-12-13 0")
library(lubridate)
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- ymd_s("2010-12-13 0")
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- ymd_m("2010-12-13 0")
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- ymd_h("2010-12-13 0")
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- ymd_h("2010-12-13 1")
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- minutes("1")
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- minutes("1")
time
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- hms(minutes("1"))
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- minutes("1")
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- minutes("1")
class(time)
## Imputing missing values
```{r, echo = TRUE}
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- minutes("1")
class(time)
## Imputing missing values
```{r, echo = TRUE}
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- minutes("1")
class(time)
## Imputing missing values
```{r, echo = TRUE}
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- minutes("1")
class(time)
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- minutes("1")
class(time)
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- minutes("1")
class(time)
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- day(minutes("1"))
class(time)
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- day(minutes("1"))
class(time)
last7days <- Sys.Date() - 1:7
hm <- merge(0:23, seq(0, 45, by = 15))
time <- day(minutes("1"))
#class(time)
#class(time)
time
time <- hms(minutes("1"))
time
time <- minutes("1")
time
time <- hour(0) + minutes(1)
hour(0)
time <- c(hour(0) + minutes(1) )
time <- paste(hour(0) + minutes(1) )
time <- paste0(hour(0) + minutes(1) )
time <- paste0(hour('0') + minutes('1') )
time <- months(3) + days(12)
time
time <- months(3) + minutes(12)
time
time <- minutes(12)
time
#class(time)
df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(date_time = date + minute(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(date_time = date + hours(0) + minute(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(date_time = date + hours(0) + minute(interval))
time <- minutes(12)
time <- hours(0) + minutes(12)
time
time <- hours(1) + minutes(12)
time
minute(minutes(12))
minute(minutes(500))
(minutes(500))
#class(time)
df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(date_time = date + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(date_interval = date + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(date_interval = date + minute(interval))
s
#class(time)
df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(date_interval = date + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(date_interval = ymd(date) + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
group_by(date) %>%
mutate(date_interval = ymd(date) + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = ymd(date) + minutes(interval))
# [1] "2009-09-26"
date <- "2009-10-01"
library(lubridate)
date <- "2009-10-01"
ymd(date) - 5
ymd(date) - minutes(5)
ymd(date) + minutes(5)
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date) + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date, tz = "") + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date, tz = "umt") + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date, tz = "utc") + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date, tz = utc) + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date, tz = "utc") + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date, tz = "UTC") + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date) + minutes(interval))
, tz = "UTC"
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date, tz = "UTC") + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date) + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.character.POSIXt(date) + minutes(interval))
as.POSIXct
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date) + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date) + minutes(interval) - hours(8))
Sys.timezone
Sys.timezone()
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date, tz="GMT") + minutes(interval))
#class(time)
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date,"GMT") + minutes(interval))
Sys.setenv(TZ='GMT')
df %>% filter(!is.na(steps)) %>%
mutate(date_interval = as.POSIXct(date) + minutes(interval))
